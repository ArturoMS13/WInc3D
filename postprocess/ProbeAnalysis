#!/usr/bin/env python

"""
Python script that reads from the probe file
"""
import numpy as np
import scipy as scp
import matplotlib.pyplot as plt
import argparse

# ====================================
# Parser Arguments
# ====================================
parser = argparse.ArgumentParser(description="Script to read from the velocity probes probe******.dat files")
parser.add_argument("-v","--verbose",action="store_true",help="Print location")
parser.add_argument("-p","--plot",action="store_true",help="Plots the wake profiles")
parser.add_argument("-w","--write",action="store_true",help="Write results in a .csv file")
parser.add_argument("SPINUPSTEPS", type=int, help="Number of time step until spinup time")
parser.add_argument("SAMPLINGSTEPS", type=int, help="Number of sampling steps after spinup time")

args = parser.parse_args()
T=args.SPINUPSTEPS
M=args.SAMPLINGSTEPS

N=15;
U=np.zeros((M,N));
V=np.zeros((M,N));
W=np.zeros((M,N));
K=np.zeros((M,N));
for i in range(M):
    probeNumber=T+i+1
    A=np.genfromtxt('probe'+str(probeNumber).zfill(6),skip_header=1,delimiter=',')
    for j in range(N):
        U[i,j]=A[j,4];
        V[i,j]=A[j,5];
        W[i,j]=A[j,6];
        K[i,j]=0.5*(U[i,j]**2+V[i,j]**2+W[i,j]**2)
# PLOT TIME SERIES
f, axarr = plt.subplots(3,2)
axarr[0,0].plot(U[:,1],'-b')
axarr[0,0].set_title('x/D=1')
axarr[0,1].plot(U[:,3],'-b')
axarr[0,1].set_title('x/D=2')
axarr[1,0].plot(U[:,5],'-b')
axarr[1,0].set_title('x/D=3')
axarr[1,1].plot(U[:,7],'-b')
axarr[1,1].set_title('x/D=4')
axarr[2,0].plot(U[:,9],'-b')
axarr[2,0].set_title('x/D=5')
axarr[2,1].plot(U[:,11],'-b')
axarr[2,1].set_title('x/D=6')
plt.show()

#dt=0.0002; # Time step for FFT
#k=1/dt
## Averaging the Signal
#E=K[:,2]
#
#AveEnergy=np.average(E);
#E=E-AveEnergy
## Do the Hanning Window
#Window=np.hanning(51);
#
#
#s=np.fft.fft(E)
#sp=np.real(s*np.conjugate(s))
#freq=np.fft.fftfreq(E.shape[-1],k)
#freqInertial=np.linspace(.0000010,0.1,100)
#freqLarge=np.linspace(.00000010,0.000001,100)
#Inertial=10*freqInertial**(-5.0/3.0)
#LargeScales=1000*freqLarge**(0.0)
#plt.loglog(freq,sp,freqInertial,Inertial,'--r',freqLarge,LargeScales,'--g')
#plt.xlim(0.0000001,0.001)
#plt.ylim(0.01,10000)
#plt.legend

