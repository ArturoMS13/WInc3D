#!/usr/bin/env python
"""
Python script that reads from the probe file
"""
import numpy as np
from scipy.signal import welch
import matplotlib.pyplot as plt
import argparse
from math import pi


def autocorr(x):
    result = np.correlate(x, x, mode='full')
    return result[result.size // 2:]

# ====================================
# Parser Arguments
# ====================================
parser = argparse.ArgumentParser(description="Script to read from the velocity probes probe******.dat files")
parser.add_argument("-v","--verbose",action="store_true",help="Print location")
parser.add_argument("-p","--plot",action="store_true",help="Plots the wake profiles")
parser.add_argument("-w","--write",action="store_true",help="Write results in a .csv file")
parser.add_argument("PATH", type=str, help="path to where the umean, vmean etc. files are (should end with a / )")
parser.add_argument("SPINUPSTEPS", type=int, help="Number of time step until spinup time")
parser.add_argument("SAMPLINGSTEPS", type=int, help="Number of sampling steps after spinup time")
parser.add_argument("SAMPLINGPERIOD", type=float, help="Period of sampling")
parser.add_argument("PROBES", type=int, help="Number of probe points")
parser.add_argument("OUTPUT", type=str, help="OUTPUT FOLDER")

args = parser.parse_args()
path = args.PATH
T=args.SPINUPSTEPS
M=args.SAMPLINGSTEPS
Time=args.SAMPLINGPERIOD
N = args.PROBES
output = args.OUTPUT

X=np.zeros((M,N,4));
Y=np.zeros((M,N,4));
Z=np.zeros((M,N,4));

U=np.zeros((M,N,4));
V=np.zeros((M,N,4));
W=np.zeros((M,N,4));

Nhalf=int(N/2)
print(Nhalf)
H=1000;
for i in range(M):
    probeNumber=T+i+1
    A=np.genfromtxt(path+'probe'+str(probeNumber).zfill(6),skip_header=1,delimiter=',')
    for j in range(N):
        for k in range(4):	
            X[i,j,k]=A[k*N+j,1];
            Y[i,j,k]=A[k*N+j,2];
            Z[i,j,k]=A[k*N+j,3];
            U[i,j,k]=A[k*N+j,4];
            V[i,j,k]=A[k*N+j,5];
            W[i,j,k]=A[k*N+j,6];

Uave1=np.average(U[:,Nhalf,0])
Uave2=np.average(U[:,Nhalf,1])
Uave3=np.average(U[:,Nhalf,2])
Uave4=np.average(U[:,Nhalf,3])

#plt.figure(1)
#plt.plot(U[:,Nhalf,0]-Uave1,label='y/H='+str(Y[0,Nhalf,0]/H))
#plt.plot(U[:,Nhalf,1]-Uave2,label='y/H='+str(Y[0,Nhalf,1]/H))
##plt.plot(U[:,Nhalf,2]-Uave3,label='y/H='+str(Y[0,Nhalf,2]/H))
##plt.plot(U[:,Nhalf,3]-Uave4,label='y/H='+str(Y[0,Nhalf,3]/H))
#plt.legend()
#plt.show()

print(Uave1,Uave2,Uave3,Uave4)
#Compute integral time scales
print("hi there")
R1=0;R2=0;R3=0;R4=0

sigma1sq=np.sum((U[:,Nhalf,0]-Uave1)**2.)/(M-1)
sigma2sq=np.sum((U[:,Nhalf,1]-Uave2)**2.)/(M-1)
sigma3sq=np.sum((U[:,Nhalf,2]-Uave3)**2.)/(M-1)
sigma4sq=np.sum((U[:,Nhalf,3]-Uave4)**2.)/(M-1)


r1=autocorr(U[:,Nhalf,0]-Uave1)
r1=r1/r1[0]
r2=autocorr(U[:,Nhalf,1]-Uave2)
r3=autocorr(U[:,Nhalf,2]-Uave3)
r4=autocorr(U[:,Nhalf,3]-Uave4)

plt.figure(2)
plt.plot(r1)
plt.show()

T1=0;T2=0;T3=0;T4=0;
for i in range(len(r1)):
	if(r1[i]<0.05):
		break	
	else:
		T1=T1+r1[i]*Time

L1=Uave1*T1
print(T1,L1)

	
#for i in range(0,M):
#	for m in range(0,M-i):
#        	r1=(U[i,Nhalf,0]-Uave1)*(U[i+m,Nhalf,0]-Uave1)/sigma1sq
#        #if(r1<0.05):
#        #    counter1=counter1+1
#	#    r1=0.
#	
#	# Average the 
#        	r2=(U[i,Nhalf,1]-Uave2)*(U[i+m,Nhalf,1]-Uave2)/sigma2sq
#        #if(r2<0.05):
#        #    r2=0.
#        	r3=(U[i,Nhalf,2]-Uave3)*(U[i+m,Nhalf,2]-Uave3)/sigma3sq
#        #if(r3<0.05):
#        #    r3=0.
#        	r4=(U[i,Nhalf,3]-Uave4)*(U[i+m,Nhalf,3]-Uave4)/sigma4sq
#        #if(r4<0.05):
#        #    r4=0.
#	r1=r1/(M-i)
#
#	R1=R1+r1*Time
#	R2=R2+r2*Time 
#	R3=R3+r3*Time
#	R4=R4+r4*Time


