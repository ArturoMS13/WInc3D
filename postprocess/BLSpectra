#!/usr/bin/env python
"""
Python script that reads from the probe file
"""
import numpy as np
from scipy.signal import welch
import matplotlib.pyplot as plt
import argparse

# ====================================
# Parser Arguments
# ====================================
parser = argparse.ArgumentParser(description="Script to read from the velocity probes probe******.dat files")
parser.add_argument("-v","--verbose",action="store_true",help="Print location")
parser.add_argument("-p","--plot",action="store_true",help="Plots the wake profiles")
parser.add_argument("-w","--write",action="store_true",help="Write results in a .csv file")
parser.add_argument("PATH", type=str, help="path to where the umean, vmean etc. files are (should end with a / )")
parser.add_argument("SPINUPSTEPS", type=int, help="Number of time step until spinup time")
parser.add_argument("SAMPLINGSTEPS", type=int, help="Number of sampling steps after spinup time")
parser.add_argument("SAMPLINGPERIOD", type=float, help="Period of sampling")
parser.add_argument("PROBES", type=int, help="Number of probe points")
parser.add_argument("OUTPUT", type=str, help="OUTPUT FOLDER")

args = parser.parse_args()
path = args.PATH
T=args.SPINUPSTEPS
M=args.SAMPLINGSTEPS
Time=args.SAMPLINGPERIOD
N = args.PROBES
output = args.OUTPUT

X=np.zeros((M,N,4));
Y=np.zeros((M,N,4));
Z=np.zeros((M,N,4));

U=np.zeros((M,N,4));
V=np.zeros((M,N,4));
W=np.zeros((M,N,4));

for i in range(M):
	probeNumber=T+i+1
	A=np.genfromtxt(path+'probe'+str(probeNumber).zfill(6),skip_header=1,delimiter=',')
    	for j in range(N):
	 	for k in range(4):	
        		X[i,j,k]=A[k*N+j,1];
        		Y[i,j,k]=A[k*N+j,2];
        		Z[i,j,k]=A[k*N+j,3];
        		U[i,j,k]=A[k*N+j,4];
        		V[i,j,k]=A[k*N+j,5];
        		W[i,j,k]=A[k*N+j,6];

NumbModes=1024
Nhalf=NumbModes/2+1
PSD_ave0=np.zeros((Nhalf,1))
PSD_ave1=np.zeros((Nhalf,1))
PSD_ave2=np.zeros((Nhalf,1))
PSD_ave3=np.zeros((Nhalf,1))
ustar=0.45

# Compute Power for location 0
for i in range(N):
    Uav=np.average(U[:,i,0])
    S=U[:,i,0]
    f, psd =welch(S,
        fs=1./Time, # sample rate
        window='hanning',
        nperseg=NumbModes,
        scaling='spectrum')
    for k in range(Nhalf):
        PSD_ave0[k]=PSD_ave0[k]+psd[k]

f0=f*Y[0,0,0]
PSD_ave0=PSD_ave0/(ustar**2.*Y[0,0,0])

# Compute Power for location 1
for i in range(N):
    Uav=np.average(U[:,i,1])
    S=U[:,i,1]
    f, psd =welch(S,
        fs=1./Time, # sample rate
        window='hanning',
        nperseg=NumbModes,
        scaling='spectrum')
    for k in range(Nhalf):
        PSD_ave1[k]=PSD_ave1[k]+psd[k]

f1=f*Y[0,0,1]
PSD_ave1=PSD_ave1/(ustar*2.*Y[0,0,1])

# Compute Power for location 1
for i in range(N):
    Uav=np.average(U[:,i,2])
    S=U[:,i,2]
    f, psd =welch(S,
        fs=1./Time, # sample rate
        window='hanning',
        nperseg=NumbModes,
        scaling='spectrum')
    for k in range(Nhalf):
        PSD_ave2[k]=PSD_ave2[k]+psd[k]
f2=f*Y[0,0,2]
PSD_ave2=PSD_ave2/(ustar**2.*Y[0,0,2])

# Compute Power for location 1
for i in range(N):
    Uav=np.average(U[:,i,3])
    S=U[:,i,3]
    f, psd =welch(S,
        fs=1./Time, # sample rate
        window='hanning',
        nperseg=NumbModes,
        scaling='spectrum')
    for k in range(Nhalf):
        PSD_ave3[k]=PSD_ave3[k]+psd[k]
f3=f*Y[0,0,3]
PSD_ave3=PSD_ave3/(ustar**2.*Y[0,0,3])

f_inertial=np.linspace(1,10,100)
psd_inertial=0.01*f_inertial**(-5./3.)
f_taylor=np.linspace(0.01,1,100)
psd_taylor=0.01*f_taylor**(-1)


if args.plot:    
    plt.loglog(f0,PSD_ave0,'k',label='y/H='+str(Y[0,0,0]/1000.))
    plt.loglog(f1,PSD_ave1,'b',label='y/H='+str(Y[0,0,1]/1000.))
    plt.loglog(f2,PSD_ave2,'g',label='y/H='+str(Y[0,0,2]/1000.))
    plt.loglog(f3,PSD_ave3,'r',label='y/H='+str(Y[0,0,3]/1000.))
    plt.loglog(f_inertial,psd_inertial,'m',label='-5/3')
    plt.loglog(f_taylor,psd_taylor,'y',label='-1')
    plt.ylim([1e-4,10])
    plt.xlim([1e-2,10])
    plt.legend(fontsize=12, loc='lower left' )
    plt.show()

if args.write:     
    with open(output+'Spectrum.dat','w') as fout:
        fout.write('# f PSD \n')
        for i in range(len(f)):
            fout.write(str(f1[i])+' '+str(float(PSD_ave0[i]))+' '+str(float(PSD_ave1[i]))+' '+str(float(PSD_ave2[i]))+'\n')


