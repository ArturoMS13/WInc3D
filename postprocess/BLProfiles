#!/usr/bin/env python
"""
Script that extracts the mean velocity from Incompact3D
Author : Georgios (Yorgos) Deskos 2017
"""
import math
import argparse
import csv
import f90nml
import matplotlib
matplotlib.use('Agg')
import numpy as np
from scipy import interpolate
from pylab import *
import matplotlib.pyplot as plt
# ====================================
# Parser Arguments
# ====================================
parser = argparse.ArgumentParser(description="Script to extract Boundary Layer Flow statistics from *.dat files")
parser.add_argument("-v","--verbose",action="store_true",help="Print location")
parser.add_argument("-p","--plot",action="store_true",help="Plots the wake profiles")
parser.add_argument("-w","--write",action="store_true",help="Write results in a .csv file")
parser.add_argument("PATH", type=str, help="path to where the umean, vmean etc. files are (should end with a / )")
parser.add_argument("FILENAME", type=str, help="Filename, should end with .pprc")
parser.add_argument("OUTPUT", type=str, help="OUTPUT FOLDER")

args = parser.parse_args()
path = args.PATH
name = args.FILENAME
output = args.OUTPUT

# Read the fortran nml (NAMELIST)
nml=f90nml.read(name)

with open(name) as nml_file:
    nml = f90nml.read(nml_file)

nx=nml['PostProcess']['nx']
ny=nml['PostProcess']['ny']
nz=nml['PostProcess']['nz']
xlx=nml['PostProcess']['xlx']
yly=nml['PostProcess']['yly']
zlz=nml['PostProcess']['zlz']
H=nml['PostProcess']['yly']

# This is not valid for always
nxd=nx
nyd=ny-1
nzd=nz

dx=float(xlx)/float(nxd)
dy=float(yly)/float(nyd)
dz=float(zlz)/float(nzd)

# UMEAN - Average velocities for u, v and w
ufile=open(path+"umean.dat","rb")
vfile=open(path+"vmean.dat","rb")
wfile=open(path+"wmean.dat","rb")
# uu - Average of the squares of the velocities u, v and w
# This is not the <u'u'> etc.
# To compute the <u'u'> we need to do <u'u'>=<uu> - <u><u>
# and similarly for the other quantities
uufile=open(path+"uumean.dat","rb")
vvfile=open(path+"vvmean.dat","rb")
wwfile=open(path+"wwmean.dat","rb")
uvfile=open(path+"uvmean.dat","rb")
uwfile=open(path+"uwmean.dat","rb")
vwfile=open(path+"vwmean.dat","rb")
# vu, wu, wv are ommited due to symmetry

# Reading the binary files into numpy vectors
umean=np.fromfile(ufile,dtype=np.float64)
vmean=np.fromfile(vfile,dtype=np.float64)
wmean=np.fromfile(wfile,dtype=np.float64)
uumean=np.fromfile(uufile,dtype=np.float64)
vvmean=np.fromfile(vvfile,dtype=np.float64)
wwmean=np.fromfile(wwfile,dtype=np.float64)
uvmean=np.fromfile(uvfile,dtype=np.float64)
uwmean=np.fromfile(uwfile,dtype=np.float64)
vwmean=np.fromfile(vwfile,dtype=np.float64)


# Initialising the 3D arrays to map the velocities etc.
x=np.zeros((nx,ny,nz))
y=np.zeros((nx,ny,nz))
z=np.zeros((nx,ny,nz))
uav=np.zeros((nx,ny,nz))
vav=np.zeros((nx,ny,nz))
wav=np.zeros((nx,ny,nz))
upup=np.zeros((nx,ny,nz))
vpvp=np.zeros((nx,ny,nz))
wpwp=np.zeros((nx,ny,nz))
upvp=np.zeros((nx,ny,nz))
upwp=np.zeros((nx,ny,nz))
vpwp=np.zeros((nx,ny,nz))

# Compute average quantities + reshape
Nsteps=nml['PostProcess']['NSteps']

uav=umean.reshape((nx,ny,nz),order='F')/Nsteps
vav=vmean.reshape((nx,ny,nz),order='F')/Nsteps
wav=wmean.reshape((nx,ny,nz),order='F')/Nsteps
upup=uumean.reshape((nx,ny,nz),order='F')/Nsteps-uav**2
vpvp=vvmean.reshape((nx,ny,nz),order='F')/Nsteps-vav**2
wpwp=wwmean.reshape((nx,ny,nz),order='F')/Nsteps-wav**2
upvp=uvmean.reshape((nx,ny,nz),order='F')/Nsteps-uav*vav
upwp=uwmean.reshape((nx,ny,nz),order='F')/Nsteps-uav*wav
vpwp=vwmean.reshape((nx,ny,nz),order='F')/Nsteps-vav*wav
TKE=0.5*(upup+vpvp+wpwp)

for i in range(nx):
    x[i,:,:]=i*dx
for j in range(ny):
    y[:,j,:]=j*dy
for k in range(nz):
    z[:,:,k]=k*dz


ustar=nml['PostProcess']['ustar']
xProfile=nml['PostProcess']['xProfile']

     
ixloc=np.where(abs(x[:,0,0]-xProfile[0])==abs(x[:,0,0]-xProfile[0]).min())[0]
jxloc=np.where(abs(y[0,:,0]-xProfile[1])==abs(y[0,:,0]-xProfile[1]).min())[0]
kxloc=np.where(abs(z[0,0,:]-xProfile[2])==abs(z[0,0,:]-xProfile[2]).min())[0]

# Calculate the u gradient
dvdx=np.zeros((ny))
for i in range(ny):
    dvdx[i]=np.average(np.gradient(vav[:,i,kxloc[0]],dx,edge_order=1))

dudy=np.gradient(uav[ixloc[0],:,kxloc[0]],dy,edge_order=2)

C_0=0.16
n=1
y0=0.1
S=0.5*(dudy+dvdx)
S_mag=np.sqrt(2*S*S)
Delta=(dx*dy*dz)**(1./3.)
C_S=C_0#(C_0**n+(0.4*(y[ixloc[0],:,kxloc[0]]/Delta+y0/Delta))**(-n))**(-1/n)
tau_s=(C_S*Delta)**2.*S*S_mag
print(np.shape(dudy),np.shape(dvdx),np.shape(S),np.shape(S_mag))
tau_s[0]=ustar**2.

#print(tau_s/ustar**2.)


print ('found indices ', ixloc[0], jxloc[0], kxloc[0])
if args.write:      
    with open(output+'profile.dat','w') as fout:
        fout.write('# y/H U/Uref U/u* Phi upup/u*^2 vpvp/u*^2 wpwp/u*^2 -upvp/u*^2 I \n')
        for jprofile in range(ny):
            Y=float(y[ixloc[0],jprofile,kxloc[0]]/H)
            U=float(uav[ixloc[0],jprofile,kxloc[0]])
            Uustar=float(np.average(uav[:,jprofile,:])/ustar)
            Phi=float(dudy[jprofile]*y[ixloc[0],jprofile,kxloc[0]]*0.4/ustar)
            UpUp=float(upup[ixloc[0],jprofile,kxloc[0]]/ustar**2.)
            VpVp=float(vpvp[ixloc[0],jprofile,kxloc[0]]/ustar**2.)
            WpWp=float(wpwp[ixloc[0],jprofile,kxloc[0]]/ustar**2.)
            UpVp=float(-np.average(upvp[:,jprofile,:])/ustar**2.)
            TAU=float(tau_s[jprofile]/ustar**2.)
            I=float(sqrt(upup[ixloc[0],jprofile,kxloc[0]])/sqrt(uav[ixloc[0],jprofile,kxloc[0]]**2.+wav[ixloc[0],jprofile,kxloc[0]]**2.))
            fout.write(str(Y)+' '+ str(U)+' '+str(Uustar)+' '+str(Phi)+' '+str(UpUp)+' '+str(VpVp)+' '+str(WpWp)+' '+str(UpVp)+' '+str(TAU)+' '+str(I)+'\n')
